#!/usr/bin/env node

/**
 * Script para verificar a configura√ß√£o do Supabase
 * 
 * Este script verifica se as vari√°veis de ambiente est√£o configuradas corretamente
 * e testa a conex√£o com o Supabase.
 */

import { createClient } from '@supabase/supabase-js';

// Carregar vari√°veis de ambiente
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üîç Verificando configura√ß√£o do Supabase...\n');

// Verificar se as vari√°veis de ambiente est√£o definidas
if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas:');
  if (!supabaseUrl) console.error('   - VITE_SUPABASE_URL n√£o definida');
  if (!supabaseKey) console.error('   - VITE_SUPABASE_ANON_KEY n√£o definida');
  console.error('\nüìù Solu√ß√£o:');
  console.error('   1. Crie um arquivo .env na raiz do projeto');
  console.error('   2. Adicione as vari√°veis:');
  console.error('      VITE_SUPABASE_URL=sua_url_do_supabase');
  console.error('      VITE_SUPABASE_ANON_KEY=sua_chave_anonima');
  process.exit(1);
}

console.log('‚úÖ Vari√°veis de ambiente configuradas');
console.log(`   URL: ${supabaseUrl}`);
console.log(`   Key: ${supabaseKey.substring(0, 10)}...${supabaseKey.substring(supabaseKey.length - 10)}`);

// Criar cliente do Supabase
const supabase = createClient(supabaseUrl, supabaseKey);

// Testar conex√£o
async function testConnection() {
  try {
    console.log('\nüì° Testando conex√£o com Supabase...');
    
    // Testar autentica√ß√£o
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erro na autentica√ß√£o:', sessionError.message);
      return false;
    }
    
    console.log('‚úÖ Autentica√ß√£o funcionando');
    
    // Testar acesso ao banco de dados
    const { data: tablesData, error: tablesError } = await supabase
      .from('contratos')
      .select('id')
      .limit(1);
    
    if (tablesError && !tablesError.message.includes('_relation "contratos" does not exist_')) {
      console.error('‚ùå Erro ao acessar banco de dados:', tablesError.message);
      return false;
    }
    
    console.log('‚úÖ Acesso ao banco de dados funcionando');
    
    // Testar storage (se configurado)
    try {
      const { data: bucketsData, error: bucketsError } = await supabase.storage.listBuckets();
      
      if (bucketsError) {
        console.warn('‚ö†Ô∏è  Erro ao acessar storage:', bucketsError.message);
      } else {
        console.log('‚úÖ Servi√ßo de storage acess√≠vel');
        if (bucketsData && bucketsData.length > 0) {
          console.log(`   Buckets encontrados: ${bucketsData.map(b => b.name).join(', ')}`);
        }
      }
    } catch (storageError) {
      console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel testar o storage:', storageError);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o:', error);
    return false;
  }
}

// Executar verifica√ß√£o
async function main() {
  const isConnected = await testConnection();
  
  if (isConnected) {
    console.log('\nüéâ Configura√ß√£o do Supabase est√° correta!');
    console.log('   O sistema deve funcionar normalmente.');
  } else {
    console.error('\nüí• Problemas encontrados na configura√ß√£o.');
    console.error('   Verifique os erros acima e consulte a documenta√ß√£o.');
  }
}

main().catch(console.error);